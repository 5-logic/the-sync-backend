// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --------------------------------------------------------------------------------

// Enums

enum Gender {
  Male   @map("male")
  Female @map("female")

  @@map("genders")
}

enum ThesisStatus {
  New      @map("new")
  Pending  @map("pending")
  Approved @map("approved")
  Rejected @map("rejected")

  @@map("thesis_statuses")
}

enum SkillLevel {
  Beginner     @map("beginner")
  Intermediate @map("intermediate")
  Proficient   @map("proficient")
  Advanced     @map("advanced")
  Expert       @map("expert")

  @@map("skill_levels")
}

enum RequestType {
  Invite @map("invite")
  Join   @map("join")

  @@map("request_types")
}

enum RequestStatus {
  Cancelled @map("cancelled")
  Pending   @map("pending")
  Approved  @map("approved")
  Rejected  @map("rejected")

  @@map("request_statuses")
}

enum SemesterStatus {
  NotYet    @map("not_yet")
  Preparing @map("preparing")
  Picking   @map("picking")
  Ongoing   @map("ongoing")
  End       @map("end")

  @@map("semester_statuses")
}

enum SubmissionStatus {
  NotSubmitted @map("not_submitted")
  Submitted    @map("submitted")

  @@map("submission_statuses")
}

enum OngoingPhase {
  ScopeAdjustable @map("scope_adjustable")
  ScopeLocked     @map("scope_locked")

  @@map("ongoing_phases")
}

enum EnrollmentStatus {
  NotYet  @map("not_yet")
  Failed  @map("failed")
  Ongoing @map("ongoing")
  Passed  @map("passed")

  @@map("enrollment_statuses")
}

enum ChecklistReviewAcceptance {
  Yes          @map("accepted")
  No           @map("rejected")
  NotAvailable @map("not_available")

  @@map("checklist_review_acceptances")
}

// --------------------------------------------------------------------------------

// Models with single primary key

model Admin {
  id       String  @id @default(uuid())
  username String  @unique @map("username")
  password String  @map("password")
  email    String? @map("email")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

model Semester {
  id                       String         @id @default(uuid())
  name                     String         @unique @map("name")
  code                     String         @unique @map("code")
  maxGroup                 Int?           @map("max_group")
  status                   SemesterStatus @default(NotYet) @map("status")
  ongoingPhase             OngoingPhase?  @map("ongoing_phase")
  defaultThesesPerLecturer Int            @default(4) @map("default_theses_per_lecturer")
  maxThesesPerLecturer     Int            @default(6) @map("max_theses_per_lecturer")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  groups                     Group[]
  enrollments                Enrollment[]
  milestones                 Milestone[]
  studentGroupParticipations StudentGroupParticipation[]
  theses                     Thesis[]

  @@map("semesters")
}

model Major {
  id   String @id @default(uuid())
  name String @map("name")
  code String @unique @map("code")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  students Student[]

  @@map("majors")
}

model User {
  id          String  @id @default(uuid())
  fullName    String  @map("full_name")
  email       String  @unique @map("email")
  password    String  @map("password")
  gender      Gender  @map("gender")
  phoneNumber String  @map("phone_number")
  isActive    Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student  Student?
  lecturer Lecturer?

  @@map("users")
}

model Student {
  userId      String @id @map("user_id")
  studentCode String @unique @map("student_code")
  majorId     String @map("major_id")

  user                            User                            @relation(fields: [userId], references: [id])
  major                           Major                           @relation(fields: [majorId], references: [id])
  studentSkills                   StudentSkill[]
  enrollments                     Enrollment[]
  studentExpectedResponsibilities StudentExpectedResponsibility[]
  requests                        Request[]
  studentGroupParticipations      StudentGroupParticipation[]

  @@map("students")
}

model Lecturer {
  userId      String  @id @map("user_id")
  isModerator Boolean @default(false) @map("is_moderator")

  user              User               @relation(fields: [userId], references: [id])
  supervisions      Supervision[]
  assignmentReviews AssignmentReview[]
  reviews           Review[]
  theses            Thesis[]

  @@map("lecturers")
}

model Group {
  id               String  @id @default(uuid())
  code             String  @unique @map("code")
  name             String  @map("name")
  projectDirection String? @map("project_direction")
  semesterId       String  @map("semester_id")
  thesisId         String? @unique @map("thesis_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  semester                      Semester                      @relation(fields: [semesterId], references: [id])
  thesis                        Thesis?                       @relation(fields: [thesisId], references: [id])
  submissions                   Submission[]
  groupRequiredSkills           GroupRequiredSkill[]
  groupExpectedResponsibilities GroupExpectedResponsibility[]
  requests                      Request[]
  studentGroupParticipations    StudentGroupParticipation[]

  @@map("groups")
}

model Thesis {
  id             String       @id @default(uuid())
  englishName    String       @map("english_name")
  vietnameseName String       @map("vietnamese_name")
  abbreviation   String       @map("abbreviation")
  description    String       @map("description")
  domain         String?      @map("domain")
  status         ThesisStatus @default(New) @map("status")
  isPublish      Boolean      @default(false) @map("is_publish")
  groupId        String?      @map("group_id")
  lecturerId     String       @map("lecturer_id")
  semesterId     String       @map("semester_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lecturer             Lecturer              @relation(fields: [lecturerId], references: [userId])
  semester             Semester              @relation(fields: [semesterId], references: [id])
  group                Group?
  supervisions         Supervision[]
  thesisVersions       ThesisVersion[]
  thesisRequiredSkills ThesisRequiredSkill[]

  @@map("theses")
}

model ThesisVersion {
  id                 String @id @default(uuid())
  version            Int    @map("version")
  supportingDocument String @map("supporting_document")
  thesisId           String @map("thesis_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  thesis Thesis @relation(fields: [thesisId], references: [id], onDelete: Cascade)

  @@map("thesis_versions")
}

model Milestone {
  id         String   @id @default(uuid())
  name       String   @map("name")
  startDate  DateTime @map("start_date")
  endDate    DateTime @map("end_date")
  semesterId String   @map("semester_id")
  note       String?  @map("note")
  documents  String[] @map("documents")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  semester    Semester     @relation(fields: [semesterId], references: [id])
  submissions Submission[]
  checklist   Checklist?

  @@map("milestones")
}

model Submission {
  id          String           @id @default(uuid())
  groupId     String           @map("group_id")
  milestoneId String           @map("milestone_id")
  documents   String[]         @default([])
  status      SubmissionStatus @default(NotSubmitted) @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  group             Group              @relation(fields: [groupId], references: [id])
  milestone         Milestone          @relation(fields: [milestoneId], references: [id])
  assignmentReviews AssignmentReview[]
  reviews           Review[]

  @@unique([groupId, milestoneId])
  @@map("submissions")
}

model Review {
  id           String  @id @default(uuid())
  feedback     String? @map("feedback")
  lecturerId   String  @map("lecturer_id")
  checklistId  String  @map("checklist_id")
  submissionId String  @map("submission_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  lecturer   Lecturer   @relation(fields: [lecturerId], references: [userId])
  submission Submission @relation(fields: [submissionId], references: [id])
  checklist  Checklist  @relation(fields: [checklistId], references: [id])

  reviewItems ReviewItem[]

  @@map("reviews")
}

model Checklist {
  id          String  @id @default(uuid())
  name        String  @map("name")
  description String? @map("description")
  milestoneId String? @unique @map("milestone_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  milestone      Milestone?      @relation(fields: [milestoneId], references: [id])
  checklistItems ChecklistItem[]
  reviews        Review[]

  @@map("checklists")
}

model ChecklistItem {
  id          String  @id @default(uuid())
  name        String  @map("name")
  description String? @map("description")
  isRequired  Boolean @default(false) @map("is_required")
  checklistId String  @map("checklist_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  checklist   Checklist    @relation(fields: [checklistId], references: [id])
  reviewItems ReviewItem[]

  @@map("checklist_items")
}

model Skill {
  id         String @id @default(uuid())
  name       String @map("name")
  skillSetId String @map("skill_set_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  skillSet             SkillSet              @relation(fields: [skillSetId], references: [id])
  studentSkills        StudentSkill[]
  groupRequiredSkills  GroupRequiredSkill[]
  thesisRequiredSkills ThesisRequiredSkill[]

  @@map("skills")
}

model SkillSet {
  id   String @id @default(uuid())
  name String @map("name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  skills Skill[]

  @@map("skill_sets")
}

model Responsibility {
  id   String @id @default(uuid())
  name String @map("name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  studentExpectedResponsibilities StudentExpectedResponsibility[]
  groupExpectedResponsibilities   GroupExpectedResponsibility[]

  @@map("responsibilities")
}

model Request {
  id        String        @id @default(uuid())
  type      RequestType   @map("type")
  status    RequestStatus @map("status")
  studentId String        @map("student_id")
  groupId   String        @map("group_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  student Student @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  group   Group   @relation(fields: [groupId], references: [id])

  @@map("requests")
}

// Models with composite primary key

model StudentSkill {
  studentId String     @map("student_id")
  skillId   String     @map("skill_id")
  level     SkillLevel @map("level")

  student Student @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  skill   Skill   @relation(fields: [skillId], references: [id])

  @@id([studentId, skillId])
  @@map("_student_skills")
}

model GroupRequiredSkill {
  groupId String @map("group_id")
  skillId String @map("skill_id")

  group Group @relation(fields: [groupId], references: [id])
  skill Skill @relation(fields: [skillId], references: [id])

  @@id([groupId, skillId])
  @@map("_group_required_skills")
}

model ThesisRequiredSkill {
  thesisId String @map("thesis_id")
  skillId  String @map("skill_id")

  thesis Thesis @relation(fields: [thesisId], references: [id], onDelete: Cascade)
  skill  Skill  @relation(fields: [skillId], references: [id])

  @@id([thesisId, skillId])
  @@map("_thesis_required_skills")
}

model StudentExpectedResponsibility {
  studentId        String @map("student_id")
  responsibilityId String @map("responsibility_id")

  student        Student        @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  responsibility Responsibility @relation(fields: [responsibilityId], references: [id])

  @@id([studentId, responsibilityId])
  @@map("_student_expected_responsibilities")
}

model GroupExpectedResponsibility {
  groupId          String @map("group_id")
  responsibilityId String @map("responsibility_id")

  group          Group          @relation(fields: [groupId], references: [id])
  responsibility Responsibility @relation(fields: [responsibilityId], references: [id])

  @@id([groupId, responsibilityId])
  @@map("_group_expected_responsibilities")
}

model Enrollment {
  studentId  String           @map("student_id")
  semesterId String           @map("semester_id")
  status     EnrollmentStatus @default(NotYet) @map("status")

  student  Student  @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  semester Semester @relation(fields: [semesterId], references: [id])

  @@id([studentId, semesterId])
  @@map("_enrollments")
}

model ReviewItem {
  reviewId        String                    @map("review_id")
  checklistItemId String                    @map("checklistitem_id")
  acceptance      ChecklistReviewAcceptance @default(NotAvailable) @map("acceptance")
  note            String?                   @map("note")

  review        Review        @relation(fields: [reviewId], references: [id])
  checklistItem ChecklistItem @relation(fields: [checklistItemId], references: [id])

  @@id([reviewId, checklistItemId])
  @@map("_review_items")
}

model Supervision {
  lecturerId String @map("lecturer_id")
  thesisId   String @map("thesis_id")

  lecturer Lecturer @relation(fields: [lecturerId], references: [userId])
  thesis   Thesis   @relation(fields: [thesisId], references: [id], onDelete: Cascade)

  @@id([thesisId, lecturerId])
  @@map("_supervisions")
}

model AssignmentReview {
  reviewerId     String  @map("reviewer_id")
  submissionId   String  @map("submission_id")
  isMainReviewer Boolean @default(false) @map("is_main_reviewer")

  reviewer   Lecturer   @relation(fields: [reviewerId], references: [userId])
  submission Submission @relation(fields: [submissionId], references: [id])

  @@id([submissionId, reviewerId])
  @@map("_assignment_reviews")
}

model StudentGroupParticipation {
  studentId  String  @map("student_id")
  groupId    String  @map("group_id")
  semesterId String  @map("semester_id")
  isLeader   Boolean @default(false) @map("is_leader")

  student  Student  @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  group    Group    @relation(fields: [groupId], references: [id])
  semester Semester @relation(fields: [semesterId], references: [id])

  @@id([studentId, groupId, semesterId])
  @@map("_student_group_participations")
}
