import { ConflictException, NotFoundException } from '@nestjs/common';
import { Test, TestingModule } from '@nestjs/testing';

import { PrismaService } from '@/providers/prisma/prisma.service';
import { UserService } from '@/users/user.service';

import { LecturerService } from './lecturer.service';

jest.mock('@/utils/hash.util', () => ({
	hash: jest.fn((pw) => `hashed-${pw}`),
}));

const mockPrisma = {
	lecturer: {
		create: jest.fn(),
		findMany: jest.fn(),
		findUnique: jest.fn(),
		update: jest.fn(),
		delete: jest.fn(),
	},
	user: {
		findFirst: jest.fn(),
		update: jest.fn(),
		delete: jest.fn(),
	},
	$transaction: jest.fn((cb) => cb(mockPrisma)),
};

const mockUserService = {
	create: jest.fn(),
};

describe('LecturerService', () => {
	let service: LecturerService;
	const lecturerId = 'lecturer-1';

	beforeEach(async () => {
		const module: TestingModule = await Test.createTestingModule({
			providers: [
				LecturerService,
				{ provide: PrismaService, useValue: mockPrisma },
				{ provide: UserService, useValue: mockUserService },
			],
		}).compile();

		service = module.get<LecturerService>(LecturerService);
		jest.clearAllMocks();
	});

	describe('create', () => {
		it('should create and return a new lecturer', async () => {
			const dto: any = { createUserDto: { email: 'a', phoneNumber: 'b' } };
			mockUserService.create.mockResolvedValue({
				id: lecturerId,
				autoGeneratedPassword: 'pass',
			});
			mockPrisma.lecturer.findUnique.mockResolvedValue(null);
			const created = {
				userId: lecturerId,
				groups: [{ id: 'group-1' }, { id: 'group-2' }],
				feedbacks: [],
			};
			mockPrisma.lecturer.create.mockResolvedValue(created);

			const result = await service.create(dto);
			expect(result).toEqual({
				...created,
				groups: ['group-1', 'group-2'],
				autoGeneratedPassword: 'pass',
			});
		});

		it('should throw if lecturer already exists', async () => {
			const dto: any = { createUserDto: { email: 'a', phoneNumber: 'b' } };
			mockUserService.create.mockResolvedValue({ id: lecturerId });
			mockPrisma.lecturer.findUnique.mockResolvedValue({ userId: lecturerId });

			await expect(service.create(dto)).rejects.toThrow(ConflictException);
		});
	});

	describe('findAll', () => {
		it('should return all lecturers', async () => {
			const lecturers = [
				{ userId: lecturerId, groups: [{ id: 'group-1' }], feedbacks: [] },
				{ userId: 'lecturer-2', groups: [], feedbacks: [] },
			];
			mockPrisma.lecturer.findMany.mockResolvedValue(lecturers);

			const result = await service.findAll();
			expect(result).toEqual([
				{ ...lecturers[0], groups: ['group-1'] },
				{ ...lecturers[1], groups: [] },
			]);
		});

		it('should throw on error', async () => {
			mockPrisma.lecturer.findMany.mockRejectedValue(new Error('fail'));
			await expect(service.findAll()).rejects.toThrow('fail');
		});
	});

	describe('findOne', () => {
		it('should return a lecturer by userId', async () => {
			const lecturer = {
				userId: lecturerId,
				groups: [{ id: 'group-1' }],
				feedbacks: [],
			};
			mockPrisma.lecturer.findUnique.mockResolvedValue(lecturer);

			const result = await service.findOne(lecturerId);
			expect(result).toEqual({
				...lecturer,
				groups: ['group-1'],
			});
		});

		it('should throw NotFoundException if not found', async () => {
			mockPrisma.lecturer.findUnique.mockResolvedValue(null);
			await expect(service.findOne('notfound')).rejects.toThrow(
				NotFoundException,
			);
		});
	});

	describe('update', () => {
		it('should update user and lecturer and return the lecturer', async () => {
			const dto: any = {
				createUserDto: { email: 'a', password: 'pw', phoneNumber: 'b' },
				isModerator: true,
			};
			const updated = {
				userId: lecturerId,
				groups: [{ id: 'group-1' }],
				feedbacks: [],
			};
			mockPrisma.user.update.mockResolvedValue({});
			mockPrisma.lecturer.update.mockResolvedValue(updated);

			const result = await service.update(lecturerId, dto);
			expect(mockPrisma.user.update).toHaveBeenCalledWith({
				where: { id: lecturerId },
				data: { email: 'a', phoneNumber: 'b', password: 'hashed-pw' },
			});
			expect(result).toEqual({
				...updated,
				groups: ['group-1'],
			});
		});

		it('should update only lecturer if no createUserDto', async () => {
			const dto: any = { isModerator: false };
			const updated = {
				userId: lecturerId,
				groups: [],
				feedbacks: [],
			};
			mockPrisma.lecturer.update.mockResolvedValue(updated);

			const result = await service.update(lecturerId, dto);
			expect(result).toEqual({
				...updated,
				groups: [],
			});
		});

		it('should throw ConflictException if not found', async () => {
			const error: any = new Error('not found');
			error.code = 'P2025';
			mockPrisma.lecturer.update.mockRejectedValue(error);

			await expect(service.update(lecturerId, {})).rejects.toThrow(
				ConflictException,
			);
		});
	});

	describe('remove', () => {
		it('should delete the lecturer and user and return status/message', async () => {
			const deleted = { userId: lecturerId, groups: [{ id: 'group-1' }] };
			mockPrisma.lecturer.delete.mockResolvedValue(deleted);
			mockPrisma.user.delete.mockResolvedValue({});

			const result = await service.remove(lecturerId);
			expect(mockPrisma.lecturer.delete).toHaveBeenCalledWith({
				where: { userId: lecturerId },
				include: { groups: { select: { id: true } } },
			});
			expect(mockPrisma.user.delete).toHaveBeenCalledWith({
				where: { id: lecturerId },
			});
			expect(result).toEqual({
				status: 'success',
				message: `Lecturer and user with userId ${lecturerId} deleted successfully`,
				groups: ['group-1'],
			});
		});

		it('should throw on error', async () => {
			mockPrisma.lecturer.delete.mockRejectedValue(new Error('fail'));
			await expect(service.remove(lecturerId)).rejects.toThrow('fail');
		});
	});
});
