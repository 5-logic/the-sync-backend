import { ApiOperationOptions } from '@nestjs/swagger';

export const GroupAdminDocs = {
	createMany: {
		summary: 'Create multiple empty groups for a semester',
		description: `Create multiple empty groups for a specific semester with auto-generated codes and names.\n\n- **Admin access only** (authentication and ADMIN role required).\n- Creates the specified number of empty groups for the given semester.\n- Group codes are auto-generated using sequential 3-digit numbers (e.g., 001, 002, 003).\n- Group names follow format: "Group {code}" (e.g., "Group 001", "Group 002").\n- Sequential numbering continues from existing groups in the same semester.\n- All other group fields (projectDirection, thesisId) are left null/empty.\n\n**Request Body:**\n- semesterId: UUID of the target semester\n- numberOfGroup: Number of groups to create (positive integer)\n\n**Process:**\n1. Validates that the semester exists\n2. Finds the highest existing group code number for the semester\n3. Generates new group codes starting from the next sequential number\n4. Creates all groups in a single database transaction\n5. Returns array of created groups with basic information\n\n**Response includes:**\n- Array of created group objects with:\n  - id: Group UUID\n  - code: Auto-generated group code (e.g., "001", "002")\n  - name: Auto-generated group name (e.g., "Group 001", "Group 002")\n  - projectDirection: null (empty)\n  - semesterId: Reference to the semester\n  - thesisId: null (no thesis assigned)\n  - createdAt: Creation timestamp\n  - updatedAt: Update timestamp\n\n**Error Cases:**\n- Returns 404 if semester does not exist\n- Returns error if numberOfGroup is invalid\n- Transaction rollback if any group creation fails\n- Detailed logging for all operations and errors\n\n**Use Cases:**\n- Admin preparing groups at the start of a semester\n- Bulk creation of groups for student registration\n- Setting up semester infrastructure before student enrollment`,
	} as ApiOperationOptions,

	formatGroup: {
		summary: 'Format and reorganize all groups in a semester',
		description: `Format and reorganize all groups in a specific semester with standardized codes.\n\n- **Admin access only** (authentication and ADMIN role required).\n- Reorganizes all existing groups in the semester by priority and updates their codes.\n- Groups with students are prioritized and placed first, empty groups are placed at the end.\n- All group codes are updated to follow format: {semesterCode}SEAI{3-digit sequential number} (e.g., SU25SEAI001, SU25SEAI002).\n		- Group names remain unchanged - only codes are updated.\n- Maintains relative order within each category (groups with students, empty groups).\n\n**Path Parameters:**\n- semesterId: UUID of the target semester\n\n**Process:**\n1. Validates that the semester exists\n2. Retrieves all groups in the semester with their student participations\n3. Sorts groups: groups with students first, empty groups last\n4. Generates new sequential codes starting from 001\n5. Updates only group codes in a single database transaction (names preserved)\n6. Returns formatted groups with student information\n\n**Response includes:**\n- Array of formatted group objects with:\n  - id: Group UUID\n  - code: Updated group code (e.g., "SU25SEAI001")\n  - name: Original group name (unchanged)\n  - projectDirection: Project direction if set\n  - semesterId: Reference to the semester\n  - thesisId: Thesis ID if assigned\n  - studentCount: Number of students in the group\n  - students: Array of student information (studentCode, fullName)\n  - createdAt: Creation timestamp\n  - updatedAt: Update timestamp (reflects the formatting operation)\n\n**Sorting Logic:**\n1. Groups with students are placed first (maintaining their relative order)\n2. Empty groups are placed at the end (maintaining their relative order)\n3. All groups receive new sequential codes regardless of their original codes\n\n**Error Cases:**\n- Returns 404 if semester does not exist\n- Transaction rollback if any group update fails\n- Detailed logging for all operations and errors\n\n**Use Cases:**\n- Admin reorganizing groups after student enrollment changes\n- Standardizing group codes and names across a semester\n- Preparing clean group structure for reporting or evaluation\n- Reordering groups to prioritize active groups with proper numeric sequence`,
	} as ApiOperationOptions,

	delete: {
		summary: 'Delete an empty group',
		description: `Delete a specific group if it contains no students.\n\n- **Admin access only** (authentication and ADMIN role required).\n- Only allows deletion of empty groups (groups with no student participations).\n- Groups with students cannot be deleted and will return an error.\n- Provides detailed feedback about why deletion failed if group contains students.\n- Returns confirmation with deleted group information upon successful deletion.\n\n**Path Parameters:**\n- groupId: UUID of the group to delete\n\n**Process:**\n1. Validates that the group exists\n2. Retrieves group with all student participations\n3. Checks if group is empty (no students)\n4. If empty: deletes the group from database\n5. If not empty: throws error with student count\n6. Returns deletion confirmation with group details\n\n**Response includes:**\n- message: Confirmation message\n- deletedGroup: Object containing:\n  - id: Deleted group UUID\n  - code: Group code that was deleted\n  - name: Group name that was deleted\n  - semesterName: Name of the semester\n  - semesterCode: Code of the semester\n\n**Error Cases:**\n- Returns 404 if group not found\n- Returns 400 if group contains students (includes count and prevention message)\n- Transaction rollback if any database errors occur\n- Detailed logging for all operations and errors\n\n**Use Cases:**\n- Admin removing unused/empty groups\n- Cleaning up groups after student withdrawals\n- Semester cleanup and maintenance\n- Removing incorrectly created groups`,
	} as ApiOperationOptions,
};
