import { ApiOperationOptions } from '@nestjs/swagger';

export const ThesisApplicationLecturerDocs = {
	findAll: {
		summary: 'Get all thesis applications for supervised theses',
		description: `Retrieve all thesis applications for theses that the authenticated lecturer supervises.\n\n- **Authorization:** Moderator or Lecturer only.\n- **Path Parameters:**\n  - semesterId (optional): Filter applications by specific semester ID.\n- **Validations:**\n  - Lecturer must exist in the system (validated via ThesisApplicationService.validateLecturer).\n  - Only returns applications for theses where lecturer has supervision role.\n- **Business logic:**\n  - Uses ThesisApplicationService.buildSupervisedThesesQuery to find supervised theses.\n  - Retrieves all ThesisApplication records for supervised theses using optimized queries.\n  - Includes comprehensive nested data via ThesisApplicationService.getComprehensiveApplicationInclude().\n  - Orders results by status (ascending - Pending first) then creation date (descending - newest first).\n  - Returns empty array if no supervised theses found.\n- **Data returned:**\n  - Application details with status and timestamps\n  - Complete thesis information with lecturer and supervisor details\n  - Group member information with student participant details\n  - Required skills with skill sets\n  - Semester information\n- **Error handling:**\n  - 404 if lecturer not found.\n  - 403 if user is not authorized (not Moderator or Lecturer).\n- **Performance:** Uses parallel queries and optimized database fetching for better performance.\n- **Logging:** Comprehensive logging of all operations with lecturer ID, semester filter, and result counts.`,
	} as ApiOperationOptions,

	findOne: {
		summary: 'Get all applications for a specific thesis',
		description: `Retrieve all thesis applications for a specific thesis regardless of lecturer supervision.\n\n- **Authorization:** Moderator, Lecturer, or Student.\n- **Path Parameters:**\n  - thesisId: ID of the thesis to get applications for.\n- **Validations:**\n  - Thesis must exist in the system (validated via ThesisApplicationService.validateThesisV2).\n- **Business logic:**\n  - Uses parallel queries to validate thesis and fetch applications simultaneously for better performance.\n  - Retrieves all ThesisApplication records for the specific thesis regardless of supervisor.\n  - Includes comprehensive nested data via ThesisApplicationService.getComprehensiveApplicationInclude().\n  - Orders results by status (ascending - Pending first) then creation date (descending - newest first).\n  - Shows all groups that have applied for this thesis regardless of application status.\n- **Data returned:**\n  - Application details with status and timestamps\n  - Complete thesis information with lecturer and supervisor details\n  - Group member information with student participant details\n  - Required skills with skill sets\n  - Semester information\n- **Error handling:**\n  - 404 if thesis not found.\n  - 403 if user is not authorized.\n- **Performance:** Optimized with Promise.all() for parallel validation and data fetching.\n- **Logging:** Logs all fetch attempts with thesis ID and result counts for monitoring.`,
	} as ApiOperationOptions,

	update: {
		summary: 'Update thesis application status (Approve/Reject)',
		description: `Update thesis application status for supervised theses. Only supervisors can approve or reject applications.\n\n- **Authorization:** Lecturer only.\n- **Path Parameters:**\n  - groupId: ID of the group applying\n  - thesisId: ID of the thesis being applied to\n- **Request Body:**\n  - status: "Approved" or "Rejected"\n- **Validations:**\n  - Uses parallel validation via ThesisApplicationService:\n    - validateSupervision: Lecturer must be a supervisor of the thesis\n    - validateApplication: Application must exist for the specified group and thesis\n  - Application must have "Pending" status (cannot update processed applications).\n- **Business logic:**\n  - Updates application status from Pending to Approved/Rejected using database transaction.\n  - **Auto-rejection feature:** When an application is approved:\n    - Automatically rejects all other pending applications for the same thesis\n    - Uses Promise.all() for efficient parallel rejection processing\n    - Ensures thesis-group exclusivity (one thesis can only be assigned to one group)\n  - Uses comprehensive include pattern for complete response data.\n  - All operations wrapped in database transaction for atomicity and consistency.\n- **Auto-rejection logic:**\n  - Triggers only when status is "Approved"\n  - Finds all pending applications for the same thesis (excluding approved group)\n  - Rejects them all simultaneously using parallel processing\n  - Logs the count of auto-rejected applications for audit\n- **Data returned:**\n  - Updated application with complete nested information\n  - Thesis details with supervisor information\n  - Group details with student participants\n  - Skill requirements and other related data\n- **Error handling:**\n  - 403 if lecturer is not a supervisor of the thesis\n  - 404 if application not found\n  - 409 if application status is not "Pending" (already processed)\n- **Performance:** Uses parallel validation and Promise.all() for optimal database operations.\n- **Logging:** Comprehensive logging of updates, auto-rejections, and error cases with detailed context.`,
	} as ApiOperationOptions,
};
