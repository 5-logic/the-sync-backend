import { ApiOperationOptions } from '@nestjs/swagger';

export const AIStudentDocs = {
	suggestStudentsForGroup: {
		summary: 'Suggest students for a group using AI',
		description: `Get AI-powered suggestions for students that would be a good fit for the specified group based on responsibility balance and team synergy.\n\n- **Authenticated access** (requires JWT authentication).\n- Analyzes current group members' responsibility levels and identifies skill gaps.\n- Uses Gemini AI to evaluate candidate students based on complementary skills.\n- Returns suggested students with compatibility scores and detailed reasoning.\n- Only suggests students enrolled in the semester but not in any group.\n- Automatically determines semester from the group.\n\n**Parameters:**\n- \`groupId\`: Required - UUID of the group to suggest students for.\n\n**Response includes:**\n- \`reasons\`: AI-generated explanation of why these students were selected and what skills the group needs\n- \`students\`: Array of student objects with all student details PLUS compatibility scores (0.0-1.0)\n- Each student object contains: full profile, responsibilities, major, enrollments, AND compatibility score\n- Students are sorted by compatibility score from highest to lowest\n\n**Student Response Structure:**\nEach student in the response contains all standard student details plus:\n- \`compatibility\`: Number (0.0-1.0) indicating how well the student fits the group\n- All other StudentDetailResponse fields (id, fullName, studentCode, major, etc.)\n\n**Responsibility System:**\n- Each student has 5 responsibilities: Backend, Frontend, DevOps, BA (Business Analyst), and AI\n- Each responsibility has a level from 0 to 5 (0 = no experience, 5 = expert level)\n- Forms a radar chart-like skill profile for each student\n\n**AI Algorithm factors:**\n- **Skill Gap Analysis**: Identifies missing or weak areas in the current group\n- **Complementary Skills**: Prefers candidates who strengthen weak areas\n- **Balanced Distribution**: Avoids overloading one area while neglecting others\n- **Team Synergy**: Considers overall fit with existing members\n- **Compatibility Scoring**: 0.0-1.0 scale with detailed criteria\n\n**Compatibility Scoring:**\n- 0.9-1.0: Excellent fit, fills critical gaps perfectly\n- 0.7-0.8: Very good fit, strengthens team significantly\n- 0.5-0.6: Good fit, provides solid contribution\n- 0.3-0.4: Fair fit, some benefits but limitations\n- 0.0-0.2: Poor fit, doesn't address team needs\n\n**Use cases:**\n- Group formation assistance for academic projects\n- Skill gap identification and filling\n- Balanced team composition optimization\n- Academic collaboration enhancement\n- Project team building with complementary skills`,
	} as ApiOperationOptions,

	suggestGroupsForStudent: {
		summary: 'Suggest groups for a student using AI',
		description: `Get AI-powered suggestions for groups that would be a good fit for the specified student based on skill complementarity and team balance.\n\n- **Authenticated access** (requires JWT authentication).\n- Analyzes the student's responsibility profile and finds groups that would benefit from their skills.\n- Uses Gemini AI to evaluate group compatibility based on skill gaps and team synergy.\n- Returns suggested groups with compatibility scores and detailed reasoning.\n- Only suggests groups with 1-4 current members (excludes empty groups and full groups).\n- Only considers groups in the specified semester.\n- Student must be enrolled in the specified semester.\n\n**Request Body:**\n- \`studentId\`: Required - UUID of the student to suggest groups for\n- \`semesterId\`: Required - UUID of the semester to find groups in\n\n**Response includes:**\n- \`reason\`: AI-generated explanation of the student's key strengths and why these groups were selected\n- \`groups\`: Array of group objects with basic info PLUS compatibility scores (0.0-1.0)\n- Each group object contains: id, code, name, AND compatibility score\n- Groups are sorted by compatibility score from highest to lowest\n\n**Group Response Structure:**\nEach group in the response contains:\n- \`id\`: Group UUID\n- \`code\`: Group code (e.g., "SU25SEAI001")\n- \`name\`: Group name (e.g., "Group 001")\n- \`compatibility\`: Number (0.0-1.0) indicating how well the student fits this group\n\n**Responsibility System:**\n- Each student has 5 responsibilities: Backend, Frontend, DevOps, BA (Business Analyst), and AI\n- Each responsibility has a level from 0 to 5 (0 = no experience, 5 = expert level)\n- Forms a radar chart-like skill profile for each student\n- AI analyzes both student's strengths and each group's skill gaps\n\n**AI Algorithm factors:**\n- **Skill Gap Analysis**: Identifies what skills each group is missing or weak in\n- **Student's Strengths**: Considers where the student excels (level 3-5)\n- **Complementary Fit**: How well does the student fill the group's gaps?\n- **Team Balance**: Will adding this student create a well-rounded team?\n- **Growth Opportunities**: Considers groups where the student can learn from others\n\n**Compatibility Scoring:**\n- 0.9-1.0: Perfect match, student's strengths exactly fill critical gaps\n- 0.7-0.8: Excellent fit, strong contribution with good balance\n- 0.5-0.6: Good fit, solid addition to the team\n- 0.3-0.4: Fair fit, some benefits but not optimal\n- 0.0-0.2: Poor fit, doesn't address team needs effectively\n\n**Group Eligibility Requirements:**\n- Must have at least 1 current member (excludes empty groups)\n- Must have at most 4 current members (excludes full groups of 5+)\n- Must be in the specified semester\n- Must have student participation records for the semester\n\n**Use cases:**\n- Student group selection assistance for academic projects\n- Skill-based team joining recommendations\n- Academic collaboration optimization\n- Balanced team formation for thesis projects\n- Finding groups that need specific technical expertise`,
	} as ApiOperationOptions,
};
